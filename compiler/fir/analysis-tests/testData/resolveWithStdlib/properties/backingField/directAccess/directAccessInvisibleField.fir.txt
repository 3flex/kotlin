Module: a
FILE: A.kt
    public final var number: R|kotlin/String|
        internal <explicit backing field>: R|kotlin/Int| = Int(10)
        public get(): R|kotlin/String| {
            ^ F|/number|.R|kotlin/Int.toString|()
        }
        public set(newValue: R|kotlin/String|): R|kotlin/Unit| {
            F|/number| = R|<local>/newValue|.R|kotlin/String.length|
        }
Module: b
FILE: B.kt
    public final fun box(): R|kotlin/String| {
        when () {
            !=(R|/number|, String(10)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(10), String("), String(, was ), R|/number|)
            }
        }

        R|/number| = String(20)
        when () {
            !=(R|/number|, String(2)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(2), String("), String(, was ), R|/number|)
            }
        }

        <HIDDEN: <local>/field is invisible># = Int(20)
        when () {
            !=(R|/number|, String(20)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(20), String("), String(, was ), R|/number|)
            }
        }

        R|/number| = String(100)
        lval rawValue: R|kotlin/Int| = <HIDDEN: <local>/field is invisible>#
        when () {
            !=(R|<local>/rawValue|, Int(3)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(3), String("), String(, was ), R|<local>/rawValue|)
            }
        }

        ^box String(OK)
    }
