FILE: delegateAccessWithOverriddenProperties.kt
    public open class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public open var rawValue: R|kotlin/Int| = Int(40)
            public get(): R|kotlin/Int| {
                ^ this@R|/A|.F|/A.rawValue|.R|kotlin/Int.times|(Int(0))
            }
            public set(value: R|kotlin/Int|): R|kotlin/Unit| {
            }

    }
    public final var number: R|kotlin/String|by object : R|A| {
        private constructor(): R|<anonymous>| {
            super<R|A|>()
        }

        local final class ValueHolder : R|kotlin/Any| {
            public constructor(value: R|kotlin/Int|): R|<anonymous>.ValueHolder| {
                super<R|kotlin/Any|>()
            }

            public final var value: R|kotlin/Int| = R|<local>/value|
                public get(): R|kotlin/Int|
                public set(value: R|kotlin/Int|): R|kotlin/Unit|

        }

        public final override var rawValue: R|kotlin/Int|
            internal <explicit backing field>: R|<anonymous>.ValueHolder| = R|/<anonymous>.ValueHolder.ValueHolder|(Int(10))
            public get(): R|kotlin/Int| {
                ^ this@R|/<anonymous>|.F|/<anonymous>.rawValue|.R|<local>/value|
            }
            public set(value: R|kotlin/Int|): R|kotlin/Unit| {
                this@R|/<anonymous>|.F|/<anonymous>.rawValue|.R|<local>/value| = R|<local>/value|
            }

        public final operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/String| {
            ^getValue this@R|/<anonymous>|.R|/<anonymous>.rawValue|.R|kotlin/Any.toString|()
        }

        public final operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/String|): R|kotlin/Unit| {
            this@R|/<anonymous>|.R|/<anonymous>.rawValue| = R|<local>/value|.R|kotlin/String.length|
        }

    }

        public get(): R|kotlin/String| {
            ^ D|/number|.R|/<anonymous>.getValue|(Null(null), ::R|/number|)
        }
        public set(<set-?>: R|kotlin/String|): R|kotlin/Unit| {
            D|/number|.R|/<anonymous>.setValue|(Null(null), ::R|/number|, R|<local>/number|)
        }
    public final fun box(): R|kotlin/String| {
        when () {
            !=(R|/number|, String(10)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(10), String("), String(, was ), R|/number|)
            }
        }

        R|/number| = String(20)
        when () {
            !=(R|/number|, String(2)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(2), String("), String(, was ), R|/number|)
            }
        }

        R|/number|.R|/<anonymous>.rawValue| = Int(20)
        when () {
            !=(R|/number|, String(20)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(20), String("), String(, was ), R|/number|)
            }
        }

        R|/number| = String(100)
        lval rawValue: R|kotlin/Int| = R|/number|.R|/<anonymous>.rawValue|
        when () {
            !=(R|<local>/rawValue|, Int(3)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(3), String("), String(, was ), R|<local>/rawValue|)
            }
        }

        R|/number|.F|/<anonymous>.rawValue|.R|<local>/value| = Int(400)
        when () {
            !=(R|/number|, String(400)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(400), String("), String(, was ), R|/number|)
            }
        }

        ^box String(OK)
    }
