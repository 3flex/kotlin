FILE: delegateAccessWithExtensionFunction2.kt
    public open class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    public final val R|A|.text: R|kotlin/String|
        public get(): R|kotlin/String| {
            ^ String(Test: )
        }
    public final var number: R|kotlin/String|by object : R|A| {
        private constructor(): R|<anonymous>| {
            super<R|A|>()
        }

        public final var rawValue: R|kotlin/Int| = Int(10)
            public get(): R|kotlin/Int|
            public set(value: R|kotlin/Int|): R|kotlin/Unit|

        public final operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/String| {
            ^getValue this@R|/<anonymous>|.R|/text|.R|kotlin/String.plus|(this@R|/<anonymous>|.R|/<anonymous>.rawValue|)
        }

        public final operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/String|): R|kotlin/Unit| {
            this@R|/<anonymous>|.R|/<anonymous>.rawValue| = R|<local>/value|.R|kotlin/String.length|
        }

    }

        public get(): R|kotlin/String| {
            ^ D|/number|.R|/<anonymous>.getValue|(Null(null), ::R|/number|)
        }
        public set(<set-?>: R|kotlin/String|): R|kotlin/Unit| {
            D|/number|.R|/<anonymous>.setValue|(Null(null), ::R|/number|, R|<local>/number|)
        }
    public final fun box(): R|kotlin/String| {
        when () {
            !=(R|/number|, String(Test: 10)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(Test: 10), String("), String(, was ), R|/number|)
            }
        }

        when () {
            !=(R|/number|.R|/text|, String(Test: )) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(Test: ), String("), String(, was ), R|/number|.R|/text|)
            }
        }

        ^box String(OK)
    }
