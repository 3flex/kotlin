FILE: delegateAccessWithLongChain.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final var number: R|kotlin/String|by object : R|kotlin/Any| {
            private constructor(): R|<anonymous>| {
                super<R|kotlin/Any|>()
            }

            public final var rawValue: R|kotlin/Int| = Int(10)
                public get(): R|kotlin/Int|
                public set(value: R|kotlin/Int|): R|kotlin/Unit|

            public final operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/String| {
                ^getValue this@R|/<anonymous>|.R|/<anonymous>.rawValue|.R|kotlin/Any.toString|()
            }

            public final operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/String|): R|kotlin/Unit| {
                this@R|/<anonymous>|.R|/<anonymous>.rawValue| = R|<local>/value|.R|kotlin/String.length|
            }

        }

            public get(): R|kotlin/String| {
                ^ this@R|/A|.D|/A.number|.R|/<anonymous>.getValue|(this@R|/A|, ::R|/A.number|)
            }
            public set(<set-?>: R|kotlin/String|): R|kotlin/Unit| {
                this@R|/A|.D|/A.number|.R|/<anonymous>.setValue|(this@R|/A|, ::R|/A.number|, R|<local>/number|)
            }

    }
    public final fun box(): R|kotlin/String| {
        lval a: R|A| = R|/A.A|()
        lval previousNumber: R|kotlin/Int| = R|<local>/a|.R|/A.number|.R|/<anonymous>.rawValue|.R|kotlin/Int.dec|()
        when () {
            !=(R|<local>/previousNumber|, Int(9)) ->  {
                ^box <strcat>(String(FAIL: expected ), String("), String(9), String("), String(, was ), R|<local>/previousNumber|)
            }
        }

        ^box String(OK)
    }
