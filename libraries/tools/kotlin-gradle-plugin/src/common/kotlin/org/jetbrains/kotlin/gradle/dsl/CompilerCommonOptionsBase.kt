// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

internal open class CompilerCommonOptionsBase @javax.inject.Inject constructor(
    objectFactory: org.gradle.api.model.ObjectFactory
) : org.jetbrains.kotlin.gradle.dsl.CompilerCommonToolOptionsBase(objectFactory), org.jetbrains.kotlin.gradle.dsl.CompilerCommonOptions {

    override val apiVersion: org.gradle.api.provider.Property<org.jetbrains.kotlin.config.ApiVersion> =
        objectFactory.property(org.jetbrains.kotlin.config.ApiVersion::class.java)

    override val languageVersion: org.gradle.api.provider.Property<org.jetbrains.kotlin.config.LanguageVersion> =
        objectFactory.property(org.jetbrains.kotlin.config.LanguageVersion::class.java)

    override val optIn: org.gradle.api.provider.ListProperty<kotlin.String> =
        objectFactory.listProperty(kotlin.String::class.java).convention(emptyList<String>())

    override val progressiveMode: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val useK2: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val languageFeatures: org.gradle.api.provider.MapProperty<org.jetbrains.kotlin.config.LanguageFeature, kotlin.Boolean> =
        objectFactory.mapProperty(org.jetbrains.kotlin.config.LanguageFeature::class.java, kotlin.Boolean::class.java).convention(emptyMap())

    internal fun toCompilerArguments(args: org.jetbrains.kotlin.cli.common.arguments.CommonCompilerArguments) {
        super.toCompilerArguments(args)
        args.apiVersion = apiVersion.orNull?.versionString
        args.languageVersion = languageVersion.orNull?.versionString
        args.optIn = optIn.get().toTypedArray()
        args.progressiveMode = progressiveMode.get()
        args.useK2 = useK2.get()
        args.freeArgs += languageFeatures.get().entries.mapTo(mutableListOf()) { (key, value) -> "-XXLanguage:${if (value) "+" else "-"}${key.name}" }
    }

    internal fun fillDefaultValues(args: org.jetbrains.kotlin.cli.common.arguments.CommonCompilerArguments) {
        super.fillDefaultValues(args)
        args.apiVersion = null
        args.languageVersion = null
        args.optIn = emptyList<String>().toTypedArray()
        args.progressiveMode = false
        args.useK2 = false
    }
}
